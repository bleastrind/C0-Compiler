const char GC = 'A';
const int GI = -9;
const float GF = 1.0;

char c;
int i;
float f;

int a0, a1, a2, a3, a4, a5, a6, a7, a8, a9;

int get(int index)
{
	switch (index)
	{
	case 0: return (a0);
	case 1: return (a1);
	case 2: return (a2);
	case 3: return (a3);
	case 4: return (a4);
	case 5: return (a5);
	case 6: return (a6);
	case 7: return (a7);
	case 8: return (a8);
	case 9: return (a9);
	}
}

void set(int index, int value)
{
	switch (index)
	{
	case 0: a0 = value;
	case 1: a1 = value;
	case 2: a2 = value;
	case 3: a3 = value;
	case 4: a4 = value;
	case 5: a5 = value;
	case 6: a6 = value;
	case 7: a7 = value;
	case 8: a8 = value;
	case 9: a9 = value;
	}
}

void randomize()
{
	set(0, 3);
	set(1, 8);
	set(2, 4);
	set(3, 1);
	set(4, 6);
	set(5, 5);
	set(6, 0);
	set(7, 2);
	set(8, 9);
	set(9, 7);
}

void print()
{
	int i;
	i = 0;
	while (i < 10)
	{
		printf(" ", get(i));
		i = i + 1;
	}
}

void swap(int i1, int i2)
{ 
	int tmp;
	tmp = get(i1);
	set(i1, get(i2));
	set(i2, tmp);
}

void sort()
{
	int i, j;
	i = 0;
	while (i < 10)
{
	j = i + 1;
	while (j < 10)
{
	if (get(i) > get(j)) swap(i, j);
	j = j + 1;
}
	i = i + 1;
}
	
}

void qsort(int beg, int end)
{
	int piv, k, r;

 if (end>= beg + 1)  
 {
 	piv =  get(beg);
		k = beg + 1;
		r = end;

		while (k < r) 
    		{
      			if (get(k) < piv) 
        			k = k + 1;
      			else {
        			swap(k, r);
				r = r - 1;
			}
    		}
		if (get(k) < piv){
		
			swap(k, beg);

			qsort(beg, k);
			qsort(r, end);			
		}else {
			if (end - beg == 1)
  				return;

			k = k - 1;
			swap(k, beg);
			qsort(beg, k);
			qsort(r, end);			
		}
  	}
 
}

int TestCase01(char c, int ii, float f)
{
	i = 6;
	return (c + ii + f);
}

int TestCase02(char c, int i, float f)
{
	const char GC = 'x';
	const int gI = 12;
	const float GF = -4.1;
	char c1, c2, c3, c4, c5, c6, c7, c8;
	int i1, i2, i3, i4, i5, i6, i7, i8;
	float f1, f2, f3, f4, f5, f6, f7, f8;
	c1 = gc;
	c2 = C1 + 1;
	c3 = c2 - 2;
	c4 = 'X';
	c5 = c3 - c4;
	c6 = c5;
	c7 = c6 + 4;
	c8 = c7 - 1;
	i1 = c8 + gC + gI;
	i2 = -i1;
	i3 = 2;
	i4 = i2 * (1 + i3) / 2;
	i5 = i4 + i2 + i1 + i;
	i6 = c + i;
	i7 = i5 + i6;
	i8 = -i7 + i;
	f = f + 1.9;
	f1 = f * 1.5;
	f2 = i8 / f1;
	f3 = -f2 + 40;
	f4 = f3 * 100;
	f5 = (gc + gi - gf) *  3.14 - c4 + i6;
	f6 = f5 - 300;
	f7 = -f6 + 91.9;
	f8 = -f7 - 0.2;
	return (f8);
}

int TestCase03()
{
	int i, sum;
	i = 1;
	sum = i - 1;
	while (i <= 100)
	{
		sum = sum + i;
		i = 1 + i;
	}
	return (sum);
}

int TestCase04(int n)
{
	if (n == 1) return (2);
	else if (n == 2) return (-1);
	else if (n == 3) return (1);
	else return(testCase04(n-1)+Testcase04(n-2)-testcAse04(n-3));
}

float getPI(int loop_time)
{
	float pi, fenmu, term;
	int sign_flag, i;
	
	pi = 0.0;
	fenmu = 1.0;
	sign_flag = 0;
	i = 0;
	
	while (i < loop_time)
	{
		term = 1.0 / fenmu;
		fenmu = fenmu + 2.0;
		if (sign_flag == 0)
		{
			sign_flag = 1;
		}
		else
		{
			term = -term;
			sign_flag = 0;
		}
		pi = pi + term;
		i = i + 1;
	}
	
	return (pi * 4.0);
}

float TestCase05()
{
	const float limit = 0.01;

	float last, this;
	int i, break_flag;
	
	i = 0;
	break_flag = 0;
	
	while (break_flag != 1)
	{
		i = i + 2;
		this = getPI(i);
		last = getPI(i - 1);
		if (last - this < limit)
			break_flag = 1;
	}
	
	return (this);
	
}

int TestCase06()
{
	int a, b, c, d;
	a = 5;
	b = -3;
	c = 7;
	d = -4;
	
	a = ((a + b -1) * (c - d)) / (a + a * 2 - c / d) * (1 + c);
	b = a * 4 - b / 2 + 3 * 8;
	c = b + a * c - d;
	d = c * 3 - 2 + 1;
	return (d);
}

int TestCase07()
{
	float a, b, c, d;
	a = 1.23;
	b = -2.4;
	c = 4.92;
	d = -3.36;
	a = ((a + b -1.0) * (c - d)) / (a + a * 2.0 - c / d) * (1.0 + c);
	b = a * 4.0 - b / 2.0 + 3.0 * 8.0;
	c = b + a * c - d;
	d = c * 3.0 - 2.0 + 1.0;
	return (d);
}

int TestCase08()
{
	float a, b, c, d;
	int x, y, z, w;
	
	x = 3;
	y = -2;
	z = 7;
	w = -4;

	a = 1.23;
	b = -2.4;
	c = 4.92;
	d = -3.36;
	a = (((a + 1) + b * z -1.0) * (c - d * y)) / (a + x + a * 2.0 - c / d) * (1.0 + c - w) / 2;
	b = a * (4.0 / y) - b / (2.0 + x) + 3.0 * 8.0 - w + z * 3;
	c = (b + x) + (a * z) * (c + w) - d + 10000.0 / y;
	d = c * 3 - 2 + 1.0;
	return(d+14608.2);
}

int TestCase09(int k)
{
	int a, b;
	
	a = 1;
	b = 2;
	
	if (a == b) {k = 0;}
	else {;}
	
	if (a == b - 1) {;}
	else {k = 0;}
	
	if (a > b) {k = 0;}
	else {;}
	
	if (a >= b) {k = 0;}
	else {;}
	
	if (a >= b - 1) {;}
	else {k = 0;}
	
	if (a < b) {;}
	else {k = 0;}
	
	if (a <= b) {;}
	else {k = 0;}
	
	if (1 + a <= b) {;}
	else {k = 0;}

	return (k);
}

int TestCase10(int k)
{
	float a, b;
	
	a = 1;
	b = 2;
	
	if (a > b) {k = 0;}
	else {;}
	
	if (a >= b) {k = 0;}
	else {;}
	
	if (a >= b - 1) {;}
	else {k = 0;}
	
	if (a < b) {;}
	else {k = 0;}
	
	if (a <= b) {;}
	else {k = 0;}
	
	if (1 + a <= b) {;}
	else {k = 0;}

	return (k);
}

int TestCase11()
{
	int i, sum;
	i = 0;
	sum = 0;

	randomize();
	sort();

	while (i < 10) {
		if (i == get(i)) sum = sum + 1;
		i = i + 1;
	}	

	randomize();
	qsort(0, 9);

	i = 0;
	while (i < 10) {
		if (i == get(i)) sum = sum + 1;
		i = i + 1;
	}	
	return (sum);
}

void main()
{
	float tmp;
	if (testcase01(gc, gi, gf) == 57)	printf("Test Case 01 - PASS");
	else					printf("Test Case 01 - FAILED");
	if (testcase02(gc, gi, gf) == 3)	printf("Test Case 02 - PASS");
	else					printf("Test Case 02 - FAILED");
	if (testcase03() == 5050)		printf("Test Case 03 - PASS");
	else					printf("Test Case 03 - FAILED");
	if (-testcase04(i) == 3)		printf("Test Case 04 - PASS");
	else					printf("Test Case 04 - FAILED");
	tmp = TestCase05();
	if (tmp >= 3.13)
	{
		if (tmp <= 3.15)		printf("Test Case 05 - PASS");
		else				printf("Test Case 05 - FAILED");
	}
	else					printf("Test Case 05 - FAILED");
	if (86 == TestCase06())			printf("Test Case 06 - PASS");
	else					printf("Test Case 06 - FAILED");

	if (467 == -TestCase07())		printf("Test Case 07 - PASS");
	else					printf("Test Case 07 - FAILED");

	if (1 == TestCase08())			printf("Test Case 08 - PASS");
	else					printf("Test Case 08 - FAILED");
	if (123 == TestCase09(123))		printf("Test Case 09 - PASS");
	else					printf("Test Case 09 - FAILED");
	if (123 == TestCase10(123))		printf("Test Case 10 - PASS");
	else					printf("Test Case 10 - FAILED");
	if (20 == TestCase11())			printf("Test Case 11 - PASS");
	else					printf("Test Case 11 - FAILED");


}
